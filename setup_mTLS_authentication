Create own Certification Authority to sign both the server and the client certificate requests. 

Certification Authority certificate -

All CA keys and certificates are in /etc/nginx/certs/ca. A key length of 4096 is used for the CA.

openssl genrsa -aes256 -out ca/ca.key 4096 chmod 400 ca/ca.key

The above command creates a new private key with a password for the CA.

[root@oc2717564268 ~]# mkdir ca
[root@oc2717564268 ~]# openssl genrsa -aes256 -out ca/ca.key 4096 chmod 400 ca/ca.key
Generating RSA private key, 4096 bit long modulus
............................++
.............................................................................................................................................................................................................................................................++
e is 65537 (0x10001)
Enter pass phrase for ca/ca.key:
139970897766288:error:28069065:lib(40):UI_set_result:result too small:ui_lib.c:831:You must type in 4 to 1023 characters
Enter pass phrase for ca/ca.key:
139970897766288:error:28069065:lib(40):UI_set_result:result too small:ui_lib.c:831:You must type in 4 to 1023 characters
Enter pass phrase for ca/ca.key:
Verifying - Enter pass phrase for ca/ca.key:
[root@oc2717564268 ~]# 

Create the root CA certificate with a validity of two years using the SHA256 hash algorithm -


[root@oc2717564268 ~]# openssl req -new -x509 -sha256 -days 730 -key ca/ca.key -out ca/ca.crt
Enter pass phrase for ca/ca.key:
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:
State or Province Name (full name) []:
Locality Name (eg, city) [Default City]:
Organization Name (eg, company) [Default Company Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (eg, your name or your server's hostname) []:42CA
Email Address []:
[root@oc2717564268 ~]# 

Common name is set as 42CA to identify the certificate.

[root@oc2717564268 ~]# chmod 444 ca/ca.crt
[root@oc2717564268 ~]# 


Verify the validity of the certificate -
[root@oc2717564268 ~]# openssl x509 -noout -text -in ca/ca.crt
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            bb:e0:e6:c4:47:e0:58:26
    Signature Algorithm: sha256WithRSAEncryption
        Issuer: C=XX, L=Default City, O=Default Company Ltd, CN=42CA
        Validity
            Not Before: Jul  7 04:32:58 2019 GMT
            Not After : Jul  6 04:32:58 2021 GMT
        Subject: C=XX, L=Default City, O=Default Company Ltd, CN=42CA
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (4096 bit)
                Modulus:
                    00:99:3b:7d:13:10:fe:cf:90:4d:5d:d5:5c:56:22:
                    14:42:25:27:57:e6:35:2e:86:79:19:d5:9c:37:3c:
                    b5:da:92:e9:0c:9b:9d:73:17:18:2c:21:78:7c:8e:
                    ca:96:43:4b:6f:d2:17:19:ce:9a:db:fe:ae:34:8d:
                    1d:81:20:b8:c7:39:7d:87:2e:f2:39:5c:f4:e5:11:
                    d7:67:f0:78:4c:8f:7b:04:98:36:83:c7:be:f6:ce:
                    d8:be:6a:ea:c1:ca:9d:87:c3:65:dc:e3:8b:a0:40:
                    21:39:36:0f:d0:90:8d:1b:26:a8:91:3b:9e:46:60:
                    34:a8:f4:58:5d:81:6a:64:17:89:5a:71:b0:5b:84:
                    f1:62:15:4b:56:58:9e:32:3a:86:68:dc:27:69:87:
                    52:3d:27:a1:b0:f7:98:e5:12:3d:45:f7:f0:e8:64:
                    6f:59:7e:27:6c:3f:60:57:42:d4:6c:bb:0b:79:c5:
                    b5:13:53:8e:98:bf:a3:ed:fe:43:7e:c8:0e:f8:c2:
                    34:5d:26:b7:a2:9f:6c:17:2b:56:ff:76:df:60:68:
                    17:89:a6:78:ba:eb:27:b6:a2:85:4d:fd:74:19:99:
                    13:22:15:52:83:95:34:14:9e:7d:81:28:ea:fd:f2:
                    c5:82:ea:eb:28:5a:31:0b:67:00:2e:20:69:3a:92:
                    17:cf:e4:83:31:69:b1:e0:a0:08:c6:78:4d:58:83:
                    96:30:90:41:2f:4d:a1:d6:f0:15:2d:c8:90:79:88:
                    05:c2:17:81:5f:93:40:dd:89:5a:b4:0d:cc:5a:29:
                    8b:dc:bb:6f:ab:63:3c:a4:dd:df:3e:aa:8c:60:5d:
                    91:07:3c:0e:2e:ab:20:bf:e6:38:d6:61:41:4d:c6:
                    65:3b:33:da:ad:99:46:ee:33:f7:84:6f:18:de:51:
                    e5:a8:03:16:58:74:bf:a0:ba:2f:13:e4:3d:05:12:
                    58:0e:64:be:ce:3c:e9:e2:5a:23:fb:2f:e0:47:40:
                    18:f2:72:f6:ab:ae:79:1d:f2:21:4b:27:c1:b7:02:
                    17:88:34:d9:04:2b:ba:1b:ab:20:7b:8d:cf:45:82:
                    83:74:79:3a:e2:48:82:ec:b0:d1:b3:d9:bc:8a:13:
                    82:3f:11:96:79:da:c6:bf:aa:05:c8:cb:c5:e8:dc:
                    d1:95:57:0b:1a:32:10:ec:0c:30:87:2f:b4:ea:29:
                    cc:51:15:b1:4b:f7:6d:43:3a:dd:64:b1:61:b4:7e:
                    ae:5a:9f:41:8c:d1:cd:b6:f2:3c:47:5e:94:c1:34:
                    aa:10:40:c3:48:6b:46:76:a9:89:d0:b4:13:c8:94:
                    f0:8b:97:4b:07:2d:81:ff:2d:1f:06:8b:8d:37:a9:
                    8a:ca:2f
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier: 
                E5:AB:33:B2:D8:E1:B4:AD:BE:FA:7F:DE:F7:D0:0E:3A:4F:AE:E0:70
            X509v3 Authority Key Identifier: 
                keyid:E5:AB:33:B2:D8:E1:B4:AD:BE:FA:7F:DE:F7:D0:0E:3A:4F:AE:E0:70

            X509v3 Basic Constraints: 
                CA:TRUE
    Signature Algorithm: sha256WithRSAEncryption
         62:a3:69:3c:02:8b:e6:01:aa:ea:c0:e1:b8:51:66:a1:84:7b:
         62:9f:a9:0c:42:8b:e2:6f:0c:f0:9e:61:2c:ef:e2:f3:50:8e:
         d8:6a:03:d0:9f:73:ca:f6:5f:79:04:ef:cf:f0:65:5e:74:6a:
         f7:41:87:c4:e9:4a:ae:f0:3d:01:4e:a1:cf:ff:b1:c9:ea:b6:
         6c:df:d7:31:95:36:d7:06:92:7f:8b:c2:cd:07:dd:5e:b9:8c:
         50:bf:c9:a0:2e:22:69:16:c1:af:99:42:59:78:67:5b:a7:79:
         20:10:fb:de:bf:3a:79:f1:c0:b1:87:99:6c:f2:24:51:cc:d6:
         ac:87:6f:49:fb:b0:1b:0e:b0:e0:ce:cc:1d:af:e1:13:92:ad:
         bd:dc:01:9c:60:c9:ee:10:b6:ce:7f:6d:de:15:bd:20:34:f3:
         9c:5e:f2:ad:3b:eb:74:95:69:1e:7d:f6:59:0e:e1:1c:58:ae:
         9f:8a:f0:a1:ef:ae:0b:22:1a:26:73:3d:5f:ae:ae:b1:1c:d8:
         5b:b7:a5:54:10:5c:7e:93:66:05:a2:75:a1:98:c9:03:c0:e8:
         48:b0:7d:43:82:f7:a5:3f:b7:80:13:5f:88:74:c0:e3:39:ab:
         38:8e:1c:a9:6e:8a:9a:04:79:1b:c8:87:f2:16:71:f8:e6:f2:
         2c:3b:d3:a9:bf:8b:0d:0a:4d:41:19:c4:b3:bf:f1:5a:26:86:
         d5:68:25:ad:cc:06:51:80:01:a9:62:ab:37:42:d6:60:8b:c7:
         f1:e3:55:72:19:24:7f:4f:02:90:6a:c7:72:4f:dc:cb:15:23:
         63:83:8c:48:ce:04:80:a5:06:ab:70:be:61:4f:bd:74:7c:46:
         21:28:56:71:83:80:13:66:51:09:ea:29:85:db:eb:44:93:0a:
         d2:f8:5a:2d:67:3a:a0:5f:dc:a6:6f:58:1d:2a:da:f8:e5:9b:
         e3:d2:e9:7f:ea:84:dc:db:ed:74:99:36:56:96:b3:98:1c:f7:
         2c:98:71:6c:cf:44:38:0e:b3:9c:df:53:2c:c8:dd:57:bc:13:
         2e:51:c1:3e:ef:89:08:3b:e3:2c:88:6c:5a:f5:c9:e8:cf:10:
         b6:5f:51:77:d5:dd:f1:a4:0d:3f:72:88:18:c3:c3:67:80:34:
         7a:20:3d:86:ce:86:84:36:a3:0e:fe:06:7e:e2:e5:fb:3e:ad:
         68:6d:39:26:5a:a5:c8:3b:21:a8:33:56:eb:2a:fa:b1:09:b0:
         51:98:73:57:93:43:86:0f:bb:79:2e:90:0c:43:ee:cb:80:f7:
         c6:10:50:54:23:02:8b:49:38:6f:23:08:5c:ec:c5:82:12:1c:
         e9:f0:82:01:98:7b:37:79
[root@oc2717564268 ~]# 

The Certificate Signing Request (CSR)

The next step is a CSR from the server which is a request to create a certificate for a specific domain name. The CA and the certificate requester are two different companies who do not share their private keys which calls for this middle step.

Create a private key for the server and then the CSR. 2048 bit keys. 

[root@oc2717564268 ca]# openssl genrsa -out oc2717564268.ibm.com.key 2048
Generating RSA private key, 2048 bit long modulus
...................................................+++
..........................................+++
e is 65537 (0x10001)
[root@oc2717564268 ca]# 

[root@oc2717564268 ca]# chmod 400 oc2717564268.ibm.com.key
[root@oc2717564268 ca]# openssl req -new -key oc2717564268.ibm.com.key -sha256 -out oc2717564268.ibm.com.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:
State or Province Name (full name) []:
Locality Name (eg, city) [Default City]:
Organization Name (eg, company) [Default Company Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (eg, your name or your server's hostname) []:oc2717564268.ibm.com
Email Address []:

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:aqswdefr
An optional company name []:
[root@oc2717564268 ca]# 

The server certificate

[root@oc2717564268 ca]# openssl x509 -req -days 365 -sha256 -in oc2717564268.ibm.com.csr -CA ca.crt -CAkey ca.key -set_serial 1 -out oc2717564268.ibm.com.crt
Signature ok
subject=/C=XX/L=Default City/O=Default Company Ltd/CN=oc2717564268.ibm.com
Getting CA Private Key
Enter pass phrase for ca.key:
[root@oc2717564268 ca]# 

To check the validity -

openssl x509 -noout -text -in oc2717564268.ibm.com.crt

[root@oc2717564268 ca]# openssl x509 -noout -text -in oc2717564268.ibm.com.crt
Certificate:
    Data:
        Version: 1 (0x0)
        Serial Number: 1 (0x1)
    Signature Algorithm: sha256WithRSAEncryption
        Issuer: C=XX, L=Default City, O=Default Company Ltd, CN=42CA
        Validity
            Not Before: Jul  7 04:57:10 2019 GMT
            Not After : Jul  6 04:57:10 2020 GMT
        Subject: C=XX, L=Default City, O=Default Company Ltd, CN=oc2717564268.ibm.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:d7:9d:bf:98:51:5a:59:55:d0:33:6c:9b:21:22:
                    03:a9:b5:23:5f:a0:3a:47:44:3a:ae:fd:d8:81:4e:
                    ca:6f:af:9c:f7:1c:6f:91:4e:ab:cc:d6:fd:1a:f1:
                    cb:ef:db:2b:e6:05:8c:15:03:b3:41:dc:b8:bb:9c:
                    e4:18:df:79:a1:c4:70:e1:eb:c4:7b:7d:27:e8:30:
                    0a:3d:43:c8:b0:cf:af:8d:fe:05:95:ca:94:b1:bc:
                    ed:74:65:64:31:b4:cd:68:11:a6:1b:79:1a:1e:a0:
                    b2:25:07:0a:c9:91:8f:bc:de:9c:29:0d:79:17:1d:
                    ef:3e:10:fa:3e:cc:78:b3:18:da:b0:07:59:11:5b:
                    85:07:2d:a0:5a:1c:1e:fb:73:0f:dc:6c:65:3c:a8:
                    01:e2:29:f4:41:5e:16:33:bd:64:73:ec:e5:72:ef:
                    2a:fb:f5:86:2a:4f:e1:75:e8:54:b9:4b:c7:6c:b3:
                    23:70:29:a7:a0:91:36:8b:08:5d:a2:e9:41:18:d2:
                    c2:d9:18:2a:1f:d3:8b:9d:66:19:0d:22:f7:56:b7:
                    18:fb:fa:37:45:ab:ab:0f:a7:29:4c:87:86:3a:48:
                    17:ee:d2:b9:66:c8:72:19:38:2e:6b:bc:c9:26:47:
                    c0:ca:16:ea:d9:c4:cb:07:7c:fc:7a:f5:af:df:aa:
                    70:41
                Exponent: 65537 (0x10001)
    Signature Algorithm: sha256WithRSAEncryption
         6b:e8:b6:5d:b0:9d:c5:f4:64:7e:f0:28:24:0c:15:77:77:83:
         42:f6:fa:d4:99:b7:62:32:03:5b:41:c5:30:07:c1:1d:51:64:
         d0:2b:a9:8d:bf:0a:33:d7:80:3c:c0:4e:58:8f:9c:3b:38:d3:
         b0:84:2c:1a:af:2d:1f:d4:1c:5c:01:44:1d:9f:fd:09:f1:77:
         53:4e:24:b4:2f:84:e9:3b:9c:c6:fe:30:5b:24:03:47:4b:47:
         c2:7e:e6:a3:af:44:f0:d7:af:86:00:07:45:49:30:82:15:f5:
         b7:e0:9c:2d:ea:76:ae:06:1f:ea:6b:26:e5:d1:4e:76:3e:ab:
         49:da:fe:40:cb:eb:bc:c9:dd:d0:b6:13:97:d3:68:73:27:b8:
         97:81:9c:a7:09:b3:02:0f:be:aa:ec:bc:b1:29:40:d8:a5:a8:
         7a:16:21:7e:7a:21:0d:76:b3:c6:37:a0:df:6f:86:64:d2:8f:
         34:7a:77:85:f6:b3:97:6d:20:46:ef:e9:34:67:0e:b8:85:33:
         0a:54:4a:79:64:90:34:38:d4:d1:03:82:bd:34:11:4c:e7:fd:
         be:cc:42:b4:97:f7:ce:2e:77:8c:29:62:b7:0b:6d:fd:2a:c9:
         41:15:95:bf:ca:04:8f:fc:4e:fd:70:14:d6:22:f1:59:f6:99:
         a4:fb:13:43:29:98:55:84:7a:db:fb:2f:09:5b:37:56:dd:ec:
         79:43:3b:67:2a:5c:b3:15:34:ae:d3:6d:ac:d6:7b:e4:d0:89:
         88:86:fc:00:02:89:d7:06:8f:25:ca:9b:b4:aa:0a:25:62:e0:
         3b:c6:33:31:84:57:88:a4:b8:1c:f8:f7:b4:99:e1:fb:e2:e2:
         a3:3d:7a:c7:21:ae:4b:ec:b7:24:f1:2e:39:4c:0a:f8:f9:6c:
         59:03:f9:e5:d5:94:de:07:cf:e7:fc:e0:40:50:24:d0:56:9c:
         fe:76:d6:68:86:7a:33:8e:18:b0:ad:07:06:d2:9a:20:75:b1:
         a5:83:80:1f:05:b4:12:f7:c5:87:61:58:6c:40:72:44:ab:aa:
         88:b7:22:2f:be:24:c9:ac:b9:89:5a:cf:9b:87:a8:2e:36:1b:
         e5:8b:2b:f4:b3:b1:c8:1b:c7:b9:81:e4:70:23:eb:bf:57:73:
         47:20:2e:50:b5:e3:f9:b1:36:85:ea:2a:9b:72:6f:4f:26:47:
         46:c1:25:4f:37:c2:41:99:c6:5c:64:ed:86:f9:59:91:9b:e7:
         47:07:f0:c3:46:0e:47:bd:d6:9a:d8:29:2c:01:31:21:cc:a4:
         44:be:82:92:f8:c7:f6:ce:e0:dc:98:54:73:fa:1b:13:59:63:
         9a:c3:8e:0a:1f:cc:10:24
[root@oc2717564268 ca]# 


[root@oc2717564268 ca]# openssl verify -CAfile ca.crt oc2717564268.ibm.com.crt
oc2717564268.ibm.com.crt: OK
[root@oc2717564268 ca]# 

The client certificate

Similar to creating the server certificate. The best option would be if the user creates the client’s CSR so that the server wouldn’t see the user’s private key. The server would just sign the CSR and return the certificate to the user.

openssl genrsa -out client/heiko.key 2048
openssl req -new -key client/heiko.key -out client/heiko.csr
openssl x509 -req -days 365 -sha256 -in client/heiko.csr -CA ca/ca.crt -CAkey ca/ca.key -set_serial 2 -out client/heiko.crt

Configure NGINX

In the HTTP (port 80) configuration, Redirect /admin to the HTTPS version. For the SSL server, turn ssl_verify_client on and send the root CA certificate via ssl_client_certificate. 

server {
  listen 80;
  ...
  location /admin {
    rewrite ^ https://$host$request_uri? permanent;
  }
  ...
}
server {
  listen 443 ssl;
  ...
  ssl_certificate /etc/nginx/certs/server/client-ssl.bauland42.com.crt;
  ssl_certificate_key /etc/nginx/certs/server/client-ssl.bauland42.com.key;
  ssl_client_certificate /etc/nginx/certs/ca/ca.crt;
  ssl_verify_client on;
  ...
}

Install the CA in the browser

scp user@IP:/etc/nginx/certs/ca/ca.crt .

Then import it in Firefox via 

Preferences > Advanced > Certificates > View Certificates > Authorities > Import …

Restart Firefox

Install the client certificate

openssl pkcs12 -export -clcerts -in client/heiko.crt -inkey client/heiko.key -out client/heiko.p12







